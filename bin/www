#!/usr/bin/env node

// Module dependencies.
const app = require('../app'),
      debug = require('debug')('scripturajs:server'),
      http = require('http')

// Get port from environment and store in Express.
const port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

const server = http.createServer(app) // Create HTTP server.

// Listen on provided port, on all network interfaces.
server.listen(port, logSuccess)
server.on('error', onError)
server.on('listening', onListening)

function normalizePort(val) { // Normalize a port into a number, string, or false.
  const port = parseInt(val, 10)
  if (port >= 0) {
    // port number
    return port
  }
  return false
}

function onError(error) { // Event listener for HTTP server "error" event.
  if (error.syscall !== 'listen') {
    throw error
  }
  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port
  switch (error.code) { // handle specific listen errors with friendly messages.
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

function onListening() { // Event listener for HTTP server "listening" event.
  const addr = server.address(),
        bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + bind)
}

function logSuccess() {
  nodeVersion = process.version //nodeVersion = process.version.replace('v', '')
  console.log('\n\n' + '\x1b[32m' + 'Node.js ' + nodeVersion + '\x1b[0m')
  console.log(
    '\x1b[32m' + '\n' +
    '     OxxO' + '\n' +
    '    X oo X' + '\n' +
    '    X >< X      Scriptura' + '\n' +
    '     XXXX~<>' + '\n' +
    '   (..)(..)' + '\n\n' +
    'Server running at port ' + port + '...' + '\x1b[0m' + '\n\n'
  )
}
